/** To setup create a character called Pins assign your desired image to it, create an ability/macro called details with !showMapPin as the command. 
Next drag it out onto the gm layer this will create an invisible token on the token layer that can move the pin from the token layer. 
Now you just need to enter the details of your pin in the Gmnotes on the pin token be sure not to delete the token id stored there as this links the tokens. 
Moving back to the token layer click where the pin is located and move it to your desired location. 
Run the details token action and it will create a handout called Map Pins in the journal and the details stored on the pin token from the gm layer will populate in it.
	*	To create and populate Map Pins handout !showMapPin
	*	To delete a map pin !deleteMapPin
	*   To lock the mirrored pin run !lockMapPins
	*	To add an image to the handout place this in the gm layer token ![Description](URL)
*/
on('ready', function() {
    const clearURL = 'https://s3.amazonaws.com/files.d20.io/images/4277467/iQYjFOsYC5JsuOPUCI9RGA/thumb.png?1401938659';
    let isLocked = false;

    function decodeGMNotes(encoded) {
        return unescape(encoded.replace(/%3C/g, '<').replace(/%3E/g, '>'));
    }

    function updateMapPinHandout(content) {
        let handout = findObjs({ type: 'handout', name: 'Map Pin' })[0];
        if (!handout) {
            handout = createObj('handout', {
                name: 'Map Pin',
                inplayerjournals: ''
            });
        }
        let parsedContent = parseContent(content);
        handout.set('notes', parsedContent);
        let handoutID = handout.id;
        sendChat('Map Pins', `/w gm Map Pin handout updated. [Open Map Pin](https://journal.roll20.net/handout/${handoutID})`);
    }

    function parseContent(content) {
        return content.replace(/!\[([^\]]*)\]\((https?:\/\/[^\)]+)\)/g, '<img src="$2" alt="$1" style="max-width: 100%;" />');
    }

    function addDetailsAction(character) {
        let ability = findObjs({ type: 'ability', characterid: character.id, name: 'Details' })[0];
        if (!ability) {
            createObj('ability', {
                characterid: character.id,
                name: 'Details',
                action: "!showMapPin",
                istokenaction: true
            });
        }
    }

    function createMirrorToken(pinToken) {
        let mirror = createObj('graphic', {
            name: 'Map Pin Mirror',
            imgsrc: clearURL,
            layer: 'objects',
            left: pinToken.get('left'),
            top: pinToken.get('top'),
            width: pinToken.get('width'),
            height: pinToken.get('height'),
            controlledby: pinToken.get('controlledby'),
            represents: pinToken.get('represents'),
            statusmarkers: '',
            pageid: pinToken.get('pageid'),
            aura1_radius: '0',
            aura1_color: '#000000',
            aura1_square: false
        });
        
        if (mirror) {
            setTimeout(() => {
                pinToken.set('gmnotes', mirror.id);
                mirror.set('gmnotes', pinToken.id); 
            }, 500);
        }
    }

    function deleteMirrorToken(pinToken) {
        let mirrorID = decodeGMNotes(pinToken.get('gmnotes'));
        let mirror = getObj('graphic', mirrorID);
        if (mirror) {
            mirror.remove();
        }
    }

    function moveLinkedTokens(obj) {
        let linkedID = decodeGMNotes(obj.get('gmnotes'));
        if (!linkedID) return;
        
        let linkedToken = getObj('graphic', linkedID);
        if (!linkedToken) return;
        
        if (isLocked) {
            obj.set({
                left: linkedToken.get('left'),
                top: linkedToken.get('top')
            });
            sendChat('Map Pins', '/w gm Map Pins are locked! Unlock with `!lockMapPins`.');
        } else {
            linkedToken.set({
                left: obj.get('left'),
                top: obj.get('top')
            });
        }
    }

    function setupMapPin(token) {
        if (token.get('layer') !== 'gmlayer') return;
        let characterID = token.get('represents');
        if (!characterID) return;
        let character = getObj('character', characterID);
        if (!character || character.get('name') !== 'Pins') return;
        
        if (token.get('name') !== 'Pins') {
            token.set('name', 'Pins');
        }
        
        token.set({ represents: character.id });
        addDetailsAction(character);
        createMirrorToken(token);
    }

    on('chat:message', function(msg) {
        if (msg.type !== 'api') return;
        
        if (msg.content === '!lockMapPins') {
            isLocked = !isLocked;
            let status = isLocked ? 'locked' : 'unlocked';
            sendChat('Map Pins', `/w gm Map Pins are now **${status}**.`);
        }
        
        if (msg.content === '!deleteMapPin') {
            let selected = msg.selected;
            if (!selected || selected.length === 0) {
                sendChat('Map Pins', 'Please select a Map Pin token to delete!');
                return;
            }
            
            let pinToken = getObj('graphic', selected[0]._id);
            if (!pinToken) {
                sendChat('Map Pins', 'Selected token is not valid!');
                return;
            }
            
            deleteMirrorToken(pinToken);
            pinToken.remove();
            sendChat('Map Pins', 'Both the Map Pin and its mirror token have been deleted.');
        }
        
        if (msg.content === '!showMapPin') {
            let player = getObj('player', msg.playerid);
            let selected = msg.selected;
            if (!selected || selected.length === 0) {
                sendChat('Map Pins', `/w ${player.get('displayname')} No pin selected!`);
                return;
            }
            
            let mirrorToken = getObj('graphic', selected[0]._id);
            if (!mirrorToken) return;
            
            let gmPinID = decodeGMNotes(mirrorToken.get('gmnotes'));
            let gmPin = getObj('graphic', gmPinID);
            if (!gmPin) return;
            
            let gmNotes = decodeGMNotes(gmPin.get('gmnotes')) || 'No details available.';
            updateMapPinHandout(gmNotes);
        }
    });
    
    on('add:graphic', setupMapPin);
    on('remove:graphic', deleteMirrorToken);
    on('change:graphic', moveLinkedTokens);
});
